# Copyright (c) 2021 The Linux Foundation. All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 and
# only version 2 as published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

from parser_util import register_parser, RamParser, cleanupString
from print_out import print_out_str
from struct_print import struct_print_class

def parse_mountpoint(ramdump, dentry):
    d_iname_offset = ramdump.field_offset('struct dentry', 'd_iname')
    d_iname_last = cleanupString(ramdump.read_cstring(dentry + d_iname_offset, 40))
    d_parent = ramdump.read_structure_field(dentry, 'struct dentry', 'd_parent')
    d_parent_prev = 0
    while d_parent != d_parent_prev:
        d_iname = cleanupString(ramdump.read_cstring(d_parent + d_iname_offset, 40))
        if d_iname != "/":
            d_iname_last = d_iname + "/" + d_iname_last
        d_parent_prev = d_parent
        d_parent = ramdump.read_structure_field(d_parent, 'struct dentry', 'd_parent')

    mount_point_path = "/" + d_iname_last
    return mount_point_path

def print_f2fs_data(ramdump):
    output_file = ramdump.open_file("f2fs_info.txt")
    init_nsproxy_addr = ramdump.address_of('init_nsproxy')
    mnt_ns = ramdump.read_structure_field(init_nsproxy_addr, 'struct nsproxy', 'mnt_ns')
    mnt_ns_list_offset = ramdump.field_offset('struct mnt_namespace', 'list')
    mnt_ns_list_head = mnt_ns + mnt_ns_list_offset
    next_offset = ramdump.field_offset('struct list_head', 'next')
    mnt_ns_entry = ramdump.read_word(mnt_ns_list_head + next_offset)
    mount_list_offset = ramdump.field_offset('struct mount', 'mnt_list')

    mount_mnt_o = ramdump.field_offset('struct mount', 'mnt')
    mount_mnt_rcu_o = ramdump.field_offset('struct mount', 'mnt_rcu')
    vfsmount_size = ramdump.sizeof('struct vfsmount')
    mnt_sb_o = ramdump.field_offset('struct vfsmount', 'mnt_sb')
    mnt_o = ramdump.field_offset('struct mount', 'mnt')
    s_writers_o = ramdump.field_offset('struct super_block', 's_writers')
    frozen_o = ramdump.field_offset('struct sb_writers', 'frozen')
    s_umount_o = ramdump.field_offset('struct super_block', 's_umount')
    count_o = ramdump.field_offset('struct rw_semaphore', 'count')
    s_id_o = ramdump.field_offset('struct super_block', 's_id')
    d_iname_offset = ramdump.field_offset('struct dentry', 'd_iname')

    dentry_d_child_o = ramdump.field_offset('struct dentry', 'd_child')
    output_file.write("(struct mount *)     (struct super_block *)    [FS_TYPE]   \t\t[DEVNAME]                               [DIRNAME]                       [SB_ID]       [umount_RW_LOCK_count]  [READ_ONLY]  [writer FROZEN (1=YES,generally)]\n")
    while mnt_ns_entry != mnt_ns_list_head:
        root = mnt_ns_entry - mount_list_offset
        root_mnt_devname = ramdump.read_structure_cstring(root, 'struct mount', 'mnt_devname', 40)
        root_mnt_sb = ramdump.read_word(root + mnt_o + mnt_sb_o)
        sb_s_type = ramdump.read_structure_field(root_mnt_sb, 'struct super_block', 's_type')
        s_type_name = ramdump.read_structure_cstring(sb_s_type, 'struct file_system_type', 'name', 40)
        sb_s_id = cleanupString(ramdump.read_cstring(root_mnt_sb + s_id_o, 40))
        sb_s_flags = ramdump.read_structure_field(root_mnt_sb, 'struct super_block', 's_flags')
        sb_s_flags = sb_s_flags & 0x1 #MS_RDONLY=0x1
        sb_s_writers_frozen = ramdump.read_int(root_mnt_sb + s_writers_o + frozen_o)
        if sb_s_writers_frozen == 0:
            sb_s_writers_frozen = 0x1
        sb_s_umount_count = ramdump.read_word(root_mnt_sb + s_umount_o + count_o)

        root_mnt_mountpoint = ramdump.read_structure_field(root, 'struct mount', 'mnt_mountpoint')
        mountpoint = parse_mountpoint(ramdump, root_mnt_mountpoint)
        if s_type_name == "f2fs" and mountpoint == "/data":
            output_file.write("0x{0:16X}\t  0x{1:16X}\t\t{2:12}\t{3:30}\t\t\t{4:30}\t{5:15}\t{6:016X}\t\t{7:3}\t\t\t\t\t{8:2}\n".format(root, root_mnt_sb, 
                        s_type_name, root_mnt_devname, mountpoint, sb_s_id, sb_s_umount_count, sb_s_flags, sb_s_writers_frozen))
            f2fs_sb_info = ramdump.read_structure_field(root_mnt_sb, 'struct super_block', 's_fs_info')
            f2fs_sb = ramdump.read_structure_field(f2fs_sb_info, 'struct f2fs_sb_info', 'sb')
            nm_info = ramdump.read_structure_field(f2fs_sb_info, 'struct f2fs_sb_info', 'nm_info')
            sm_info = ramdump.read_structure_field(f2fs_sb_info, 'struct f2fs_sb_info', 'sm_info')
            ckpt_info = ramdump.read_structure_field(f2fs_sb_info, 'struct f2fs_sb_info', 'ckpt')
            sbi = struct_print_class(ramdump, 'f2fs_sb_info', f2fs_sb_info, output_file)
            sbi.append('sb_lock', 'rw_semaphore')
            sbi.append('valid_super_block', 'u32')
            sbi.append('s_flag', 'u32')
            sbi.append('writepages', 'mutex')
            sbi.append('io_order_lock', 'rw_semaphore')
            sbi.append('cur_cp_pack', 'u32')
            sbi.append('cp_global_sem', 'rw_semaphore')
            sbi.append('cp_rwsem', 'rw_semaphore')
            sbi.append('node_write', 'rw_semaphore')
            sbi.append('node_change', 'rw_semaphore')
            sbi.append('fsync_seg_id', 'u32')
            sbi.append('fsync_node_num', 'u32')
            sbi.append('max_orphans', 'u32')
            sbi.append('flush_lock', 'mutex')
            sbi.append('extent_tree_lock', 'mutex')
            #basic filesystem units
            sbi.append('log_sectors_per_block', 'u32')
            sbi.append('log_blocksize', 'u32')
            sbi.append('blocksize', 'u32')
            sbi.append('root_ino_num', 'u32')
            sbi.append('node_ino_num', 'u32')
            sbi.append('meta_ino_num', 'u32')
            sbi.append('log_blocks_per_seg', 'u32')
            sbi.append('blocks_per_seg', 'u32')
            sbi.append('segs_per_sec', 'u32')
            sbi.append('secs_per_zone', 'u32')
            sbi.append('total_sections', 'u32')
            sbi.append('total_node_count', 'u32')
            sbi.append('total_valid_node_count', 'u32')
            sbi.append('max_file_blocks', 'u32')
            sbi.append('dir_level', 'u32')
            sbi.append('readdir_ra', 'u32')
            sbi.append('user_block_count', 'u32')
            sbi.append('total_valid_block_count', 'u32')
            sbi.append('discard_blks', 'u32')
            sbi.append('last_valid_block_count', 'u32')
            sbi.append('reserved_blocks', 'u32')
            sbi.append('current_reserved_blocks', 'u32')
            sbi.append('unusable_block_count', 'u32')
            sbi.append('nquota_files', 'u32')
            sbi.append('quota_sem', 'rw_semaphore')
            sbi.append('nr_pages[0]', 'u32')
            sbi.append('nr_pages[1]', 'u32')
            sbi.append('nr_pages[2]', 'u32')
            sbi.append('nr_pages[3]', 'u32')
            sbi.append('nr_pages[4]', 'u32')
            sbi.append('nr_pages[5]', 'u32')
            sbi.append('nr_pages[6]', 'u32')
            sbi.append('nr_pages[7]', 'u32')
            sbi.append('nr_pages[8]', 'u32')
            sbi.append('nr_pages[9]', 'u32')
            sbi.append('nr_pages[10]', 'u32')
            sbi.append('nr_pages[11]', 'u32')
            sbi.append('nr_pages[12]', 'u32')
            sbi.append('nr_pages[13]', 'u32')
            sbi.append('wb_sync_req[0]', 'u32')
            sbi.append('wb_sync_req[1]', 'u32')
            sbi.append('gc_lock', 'rw_semaphore')
            sbi.append('cur_victim_sec', 'u32')
            sbi.append('gc_mode', 'u32')
            sbi.append('next_victim_seg[0]', 'u32')
            sbi.append('next_victim_seg[1]', 'u32')
            sbi.append('atomic_files', 'u32')
            sbi.append('skipped_atomic_files[0]', 'u64')
            sbi.append('skipped_atomic_files[1]', 'u64')
            sbi.append('skipped_gc_rwsem', 'u64')
            sbi.append('gc_pin_file_threshold', 'u64')
            sbi.append('pin_sem', 'rw_semaphore')
            sbi.append('max_victim_search', 'u32')
            sbi.append('migration_granularity', 'u32')
            if (ramdump.is_config_defined('CONFIG_F2FS_STAT_FS')):
                sbi.append('meta_count', 'u32')
                sbi.append('segment_count[0]', 'u32')
                sbi.append('segment_count[1]', 'u32')
                sbi.append('block_count[0]', 'u32')
                sbi.append('block_count[1]', 'u32')
                sbi.append('inplace_count', 'u32')
                sbi.append('total_hit_ext', 'u64')
                sbi.append('read_hit_rbtree', 'u64')
                sbi.append('read_hit_largest', 'u64')
                sbi.append('read_hit_cached', 'u64')
                sbi.append('inline_xattr', 'u32')
                sbi.append('inline_inode', 'u32')
                sbi.append('inline_dir', 'u32')
                sbi.append('compr_inode', 'u32')
                sbi.append('compr_blocks', 'u32')
                sbi.append('vw_cnt', 'u32')
                sbi.append('max_aw_cnt', 'u32')
                sbi.append('max_vw_cnt', 'u32')
                sbi.append('io_skip_bggc', 'u32')
                sbi.append('other_skip_bggc', 'u32')
                sbi.append('ndirty_inode[0]', 'u32')
                sbi.append('ndirty_inode[1]', 'u32')
                sbi.append('ndirty_inode[2]', 'u32')
                sbi.append('ndirty_inode[3]', 'u32')
            sbi.append('rw_iostat', 'u64')
            sbi.append('prev_rw_iostat', 'u64')
            sbi.append('iostat_enable', 'u8')
            sbi.append('iostat_next_period', 'u64')
            sbi.append('iostat_period_ms', 'u32')
            sbi.append('data_io_flag', 'u32')
            sbi.append('node_io_flag', 'u32')
            sbi.append('s_ndevs', 'u32')
            sbi.append('dirty_device', 'u32')
            sbi.append('umount_mutex', 'mutex')
            sbi.append('shrinker_run_no', 'u32')
            sbi.append('sectors_written_start', 'u64')
            sbi.append('kbytes_written', 'u64')
            sbi.process()
            sbi.print_struct()
            sb = struct_print_class(ramdump, 'super_block', f2fs_sb, output_file)
            sb.append('s_flags', 'u64')
            sb.append('s_iflags', 'u64')
            sb.append('s_magic', 'u64')
            sb.append('s_umount', 'rw_semaphore')
            sb.append('s_count', 'u32')
            sb.append('s_active', 'u32')
            sb.process()
            sb.print_struct()
            f2fs_raw_super = ramdump.read_structure_field(f2fs_sb_info, 'struct f2fs_sb_info', 'raw_super')
            rawsb = struct_print_class(ramdump, 'f2fs_super_block', f2fs_raw_super, output_file)
            rawsb.append('magic', 'u32')
            rawsb.append('major_ver', 'u16')
            rawsb.append('minor_ver', 'u16')
            rawsb.append('log_sectorsize', 'u32')
            rawsb.append('log_sectors_per_block', 'u32')
            rawsb.append('log_blocksize', 'u32')
            rawsb.append('log_blocks_per_seg', 'u32')
            rawsb.append('segs_per_sec', 'u32')
            rawsb.append('secs_per_zone', 'u32')
            rawsb.append('checksum_offset', 'u32')
            rawsb.append('block_count', 'u64')
            rawsb.append('section_count', 'u32')
            rawsb.append('segment_count', 'u32')
            rawsb.append('segment_count_ckpt', 'u32')
            rawsb.append('segment_count_sit', 'u32')
            rawsb.append('segment_count_nat', 'u32')
            rawsb.append('segment_count_ssa', 'u32')
            rawsb.append('segment_count_main', 'u32')
            rawsb.append('extension_count', 'u32')
            rawsb.append('cp_payload', 'u32')
            rawsb.append('feature', 'u32')
            rawsb.append('encryption_level', 'u8')
            rawsb.process()
            rawsb.print_struct()
            #Dump F2FS node manager sbi->nm_info
            nmi = struct_print_class(ramdump, 'f2fs_nm_info', nm_info, output_file)
            nmi.append('max_nid', 'u32')
            nmi.append('available_nids', 'u32')
            nmi.append('next_scan_nid', 'u32')
            nmi.append('ram_thresh', 'u32')
            nmi.append('ra_nid_pages', 'u32')
            nmi.append('dirty_nats_ratio', 'u32')
            nmi.append('nat_tree_lock', 'rw_semaphore')
            nmi.append('nat_cnt', 'u32')
            nmi.append('dirty_nat_cnt', 'u32')
            nmi.append('nat_blocks', 'u32')
            nmi.append('nid_cnt[0]', 'u32')
            nmi.append('nid_cnt[1]', 'u32')
            nmi.append('build_lock', 'mutex')
            nmi.append('nat_bits_blocks', 'u32')
            nmi.append('bitmap_size', 'u32')
            nmi.process()
            nmi.print_struct()
            #F2FS segment manager sbi->sm_info
            smi = struct_print_class(ramdump, 'f2fs_sm_info', sm_info, output_file)
            smi.append('curseg_lock', 'rw_semaphore')
            smi.append('segment_count', 'u32')
            smi.append('main_segments', 'u32')
            smi.append('reserved_segments', 'u32')
            smi.append('ovp_segments', 'u32')
            smi.append('rec_prefree_segments', 'u32')
            smi.append('trim_sections', 'u32')
            smi.append('ipu_policy', 'u32')
            smi.append('min_ipu_util', 'u32')
            smi.append('min_fsync_blocks', 'u32')
            smi.append('min_seq_blocks', 'u32')
            smi.append('min_hot_blocks', 'u32')
            smi.append('min_ssr_sections', 'u32')
            smi.process()
            smi.print_struct()
            sit_info = ramdump.read_structure_field(sm_info, 'struct f2fs_sm_info', 'sit_info')
            sit = struct_print_class(ramdump, 'sit_info', sit_info, output_file)
            sit.append('sit_blocks', 'u32')
            sit.append('written_valid_blocks', 'u32')
            sit.append('bitmap_size', 'u32')
            sit.append('dirty_sentries', 'u32')
            sit.append('sents_per_block', 'u32')
            sit.append('sentry_lock', 'rw_semaphore')
            sit.append('elapsed_time', 'u64')
            sit.append('mounted_time', 'u64')
            sit.append('min_mtime', 'u64')
            sit.append('max_mtime', 'u64')
            sit.append('last_victim[0]', 'u32')
            sit.append('last_victim[1]', 'u32')
            sit.append('last_victim[2]', 'u32')
            sit.append('last_victim[3]', 'u32')
            sit.process()
            sit.print_struct()
            free_info = ramdump.read_structure_field(sm_info, 'struct f2fs_sm_info', 'free_info')
            freeinfo = struct_print_class(ramdump, 'free_segmap_info', free_info, output_file)
            freeinfo.append('start_segno', 'u32')
            freeinfo.append('free_segments', 'u32')
            freeinfo.append('free_sections', 'u32')
            freeinfo.process()
            freeinfo.print_struct()
            dirty_info = ramdump.read_structure_field(sm_info, 'struct f2fs_sm_info', 'dirty_info')
            dirtyinfo = struct_print_class(ramdump, 'dirty_seglist_info', dirty_info, output_file)
            dirtyinfo.append('seglist_lock', 'mutex')
            dirtyinfo.append('nr_dirty[0]', 'u32')
            dirtyinfo.append('nr_dirty[1]', 'u32')
            dirtyinfo.append('nr_dirty[2]', 'u32')
            dirtyinfo.append('nr_dirty[3]', 'u32')
            dirtyinfo.append('nr_dirty[4]', 'u32')
            dirtyinfo.append('nr_dirty[5]', 'u32')
            dirtyinfo.append('nr_dirty[6]', 'u32')
            dirtyinfo.append('nr_dirty[7]', 'u32')
            dirtyinfo.process()
            dirtyinfo.print_struct()
            curseg_array = ramdump.read_structure_field(sm_info, 'struct f2fs_sm_info', 'curseg_array')
            curseginfo = struct_print_class(ramdump, 'curseg_info', curseg_array, output_file)
            curseginfo.append('curseg_mutex', 'mutex')
            curseginfo.append('journal_rwsem', 'rw_semaphore')
            curseginfo.append('segno', 'u32')
            curseginfo.append('next_blkoff', 'u16')
            curseginfo.append('zone', 'u32')
            curseginfo.append('next_segno', 'u32')
            curseginfo.process()
            curseginfo.print_struct()
            fcc_info = ramdump.read_structure_field(sm_info, 'struct f2fs_sm_info', 'fcc_info')
            fccinfo = struct_print_class(ramdump, 'flush_cmd_control', fcc_info, output_file)
            fccinfo.append('issued_flush', 'u32')
            fccinfo.append('queued_flush', 'u32')
            fccinfo.process()
            fccinfo.print_struct()
            dcc_info = ramdump.read_structure_field(sm_info, 'struct f2fs_sm_info', 'dcc_info')
            dccinfo = struct_print_class(ramdump, 'discard_cmd_control', dcc_info, output_file)
            dccinfo.append('discard_wake', 'u32')
            dccinfo.append('cmd_lock', 'mutex')
            dccinfo.append('nr_discards', 'u32')
            dccinfo.append('max_discards', 'u32')
            dccinfo.append('discard_granularity', 'u32')
            dccinfo.append('undiscard_blks', 'u32')
            dccinfo.append('next_pos', 'u32')
            dccinfo.append('issued_discard', 'u32')
            dccinfo.append('queued_discard', 'u32')
            dccinfo.append('discard_cmd_cnt', 'u32')
            dccinfo.process()
            dccinfo.print_struct()
            writeio_0 = ramdump.read_structure_field(f2fs_sb_info, 'struct f2fs_sb_info', 'write_io[0]')
            writeio_1 = ramdump.read_structure_field(f2fs_sb_info, 'struct f2fs_sb_info', 'write_io[1]')
            writeio_2 = ramdump.read_structure_field(f2fs_sb_info, 'struct f2fs_sb_info', 'write_io[2]')
            writeio_list = [writeio_0, writeio_1, writeio_2]
            for writeio in writeio_list:
                bio = ramdump.read_structure_field(writeio, 'struct f2fs_bio_info', 'bio')
                w_io = struct_print_class(ramdump, 'f2fs_bio_info', writeio, output_file)
                w_io.append('bio', 'ptr')
                if bio:
                    w_io.append('io_rwsem', 'rw_semaphore')
                    w_io.append('bio_list_lock', 'rw_semaphore')
                w_io.process()
                w_io.print_struct()
            ckpt = struct_print_class(ramdump, 'f2fs_checkpoint', ckpt_info, output_file)
            ckpt.append('checkpoint_ver', 'u64')
            ckpt.append('user_block_count', 'u64')
            ckpt.append('valid_block_count', 'u64')
            ckpt.append('rsvd_segment_count', 'u32')
            ckpt.append('overprov_segment_count', 'u32')
            ckpt.append('free_segment_count', 'u32')
            ckpt.append('cur_node_segno[0]', 'u32')
            ckpt.append('cur_node_segno[1]', 'u32')
            ckpt.append('cur_node_segno[2]', 'u32')
            ckpt.append('cur_node_segno[3]', 'u32')
            ckpt.append('cur_node_segno[4]', 'u32')
            ckpt.append('cur_node_segno[5]', 'u32')
            ckpt.append('cur_node_segno[6]', 'u32')
            ckpt.append('cur_node_segno[7]', 'u32')
            ckpt.append('cur_node_blkoff[0]', 'u16')
            ckpt.append('cur_node_blkoff[1]', 'u16')
            ckpt.append('cur_node_blkoff[2]', 'u16')
            ckpt.append('cur_node_blkoff[3]', 'u16')
            ckpt.append('cur_node_blkoff[4]', 'u16')
            ckpt.append('cur_node_blkoff[5]', 'u16')
            ckpt.append('cur_node_blkoff[6]', 'u16')
            ckpt.append('cur_node_blkoff[7]', 'u16')
            ckpt.append('cur_data_segno[0]', 'u32')
            ckpt.append('cur_data_segno[1]', 'u32')
            ckpt.append('cur_data_segno[2]', 'u32')
            ckpt.append('cur_data_segno[3]', 'u32')
            ckpt.append('cur_data_segno[4]', 'u32')
            ckpt.append('cur_data_segno[5]', 'u32')
            ckpt.append('cur_data_segno[6]', 'u32')
            ckpt.append('cur_data_segno[7]', 'u32')
            ckpt.append('cur_data_blkoff[0]', 'u16')
            ckpt.append('cur_data_blkoff[1]', 'u16')
            ckpt.append('cur_data_blkoff[2]', 'u16')
            ckpt.append('cur_data_blkoff[3]', 'u16')
            ckpt.append('cur_data_blkoff[4]', 'u16')
            ckpt.append('cur_data_blkoff[5]', 'u16')
            ckpt.append('cur_data_blkoff[6]', 'u16')
            ckpt.append('cur_data_blkoff[7]', 'u16')
            ckpt.append('ckpt_flags', 'u32')
            ckpt.append('cp_pack_total_block_count', 'u32')
            ckpt.append('cp_pack_start_sum', 'u32')
            ckpt.append('valid_node_count', 'u32')
            ckpt.append('valid_inode_count', 'u32')
            ckpt.append('next_free_nid', 'u32')
            ckpt.append('sit_ver_bitmap_bytesize', 'u32')
            ckpt.append('nat_ver_bitmap_bytesize', 'u32')
            ckpt.append('checksum_offset', 'u32')
            ckpt.append('elapsed_time', 'u64')
            ckpt.append('alloc_type[0]', 'u8')
            ckpt.append('alloc_type[1]', 'u8')
            ckpt.append('alloc_type[2]', 'u8')
            ckpt.append('alloc_type[3]', 'u8')
            ckpt.append('alloc_type[4]', 'u8')
            ckpt.append('alloc_type[5]', 'u8')
            ckpt.append('alloc_type[6]', 'u8')
            ckpt.append('alloc_type[7]', 'u8')
            ckpt.append('alloc_type[8]', 'u8')
            ckpt.append('alloc_type[9]', 'u8')
            ckpt.append('alloc_type[10]', 'u8')
            ckpt.append('alloc_type[11]', 'u8')
            ckpt.append('alloc_type[12]', 'u8')
            ckpt.append('alloc_type[13]', 'u8')
            ckpt.append('alloc_type[14]', 'u8')
            ckpt.append('alloc_type[15]', 'u8')
            ckpt.process()
            ckpt.print_struct()
            mount_opt = ramdump.struct_field_addr(f2fs_sb_info, 'struct f2fs_sb_info', 'mount_opt')
            mntop = struct_print_class(ramdump, 'f2fs_mount_info', mount_opt, output_file)
            mntop.append('opt', 'u32')
            mntop.append('write_io_size_bits', 'u32')
            mntop.append('root_reserved_blocks', 'u32')
            mntop.append('s_resuid', 'u32')
            mntop.append('s_resgid', 'u32')
            mntop.append('active_logs', 'u32')
            mntop.append('inline_xattr_size', 'u32')
            if (ramdump.is_config_defined('CONFIG_QUOTA')):
                mntop.append('s_jquota_fmt', 'u8')
            mntop.append('whint_mode', 'u32')
            mntop.append('alloc_mode', 'u32')
            mntop.append('fsync_mode', 'u32')
            mntop.append('fs_mode', 'u32')
            mntop.append('bggc_mode', 'u32')
            if (ramdump.is_config_defined('CONFIG_FS_ENCRYPTION')):
                mntop.append('inlinecrypt', 'u8')
            mntop.append('unusable_cap_perc', 'u32')
            mntop.append('unusable_cap', 'u32')
            mntop.process()
            mntop.print_struct()
            gc_thread = ramdump.read_structure_field(f2fs_sb_info, 'struct f2fs_sb_info', 'gc_thread')
            gc = struct_print_class(ramdump, 'f2fs_gc_kthread', gc_thread, output_file)
            gc.append('urgent_sleep_time', 'u32')
            gc.append('min_sleep_time', 'u32')
            gc.append('max_sleep_time', 'u32')
            gc.append('no_gc_sleep_time', 'u32')
            gc.append('gc_wake', 'u32')
            gc.process()
            gc.print_struct()
            break

        mnt_ns_entry = ramdump.read_structure_field(mnt_ns_entry, 'struct list_head', 'next')
    output_file.close()

@register_parser('--print-f2fs', 'Extract F2FS super_block info')
class FileSystem(RamParser):

    def parse(self):
        if self.ramdump.kernel_version < (4, 9):
            print_out_str("Linux version lower than 4.9 is not supported!!")
            return
        else:
            print_f2fs_data(self.ramdump)
